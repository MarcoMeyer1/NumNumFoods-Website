@page "/new-address"
@inject NavigationManager Navigation
@inject HttpClient Http
@using NumNumFoods.Services
@inject UserState UserState
@using NumNumFoods.Models

<div class="new-address-container">
    <h1 class="title">Add New Address</h1>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="error-message">@ErrorMessage</div>
    }

<!-- Address Type Selection -->




    <!-- Address Form Fields -->
    <div class="address-form">
        <div class="form-group">
            <label for="recipientName">Recipient Name</label>
            <input type="text" id="recipientName" placeholder="Enter recipient name" @bind="billingAddress.FullName" />
        </div>

        <div class="form-group">
            <label for="recipientMobile">Recipient Mobile Number</label>
            <input type="text" id="recipientMobile" placeholder="Enter mobile number" @bind="billingAddress.PhoneNumber" />
        </div>

        <div class="form-group">
            <label for="streetAddress">Street Address</label>
            <input type="text" id="streetAddress" placeholder="Eg. 12 Ridge Street" @bind="billingAddress.StreetAddress" />
        </div>

        <div class="form-group">
            <label for="complexBuilding">Complex / Building (Optional)</label>
            <input type="text" id="complexBuilding" placeholder="Complex or Building Name, unit number or floor" @bind="billingAddress.ComplexBuilding" />
        </div>

        <div class="form-group">
            <label for="suburb">Suburb</label>
            <input type="text" id="suburb" placeholder="Suburb" @bind="billingAddress.Suburb" />
        </div>

        <div class="form-group">
            <label for="cityTown">City / Town</label>
            <input type="text" id="cityTown" placeholder="City / Town" @bind="billingAddress.City" />
        </div>

        <div class="form-group">
            <label for="province">Province</label>
            <select id="province" @bind="billingAddress.Province">
                <option value="">Select Province</option>
                <option value="Eastern Cape">Eastern Cape</option>
                <option value="Western Cape">Western Cape</option>
                <option value="Gauteng">Gauteng</option>
                <!-- Add more provinces as needed -->
            </select>
        </div>

        <div class="form-group">
            <label for="postalCode">Postal Code</label>
            <input type="text" id="postalCode" placeholder="Postal Code" @bind="billingAddress.PostalCode" />
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="action-buttons">
        <button class="cancel-button" @onclick="Cancel">Cancel</button>
        <button class="save-button" @onclick="SaveAddress">Save Address</button>
    </div>
</div>

@code {
    private BillingAddress billingAddress = new BillingAddress();
    private string ErrorMessage;

    protected override void OnInitialized()
    {
        if (!UserState.IsLoggedIn)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        billingAddress.UserId = UserState.UserId;
        billingAddress.AddressType = "Residential"; // Default selection
    }

    private async Task SaveAddress()
    {
        ErrorMessage = string.Empty;

        // Basic validation
        if (string.IsNullOrWhiteSpace(billingAddress.FullName) ||
            string.IsNullOrWhiteSpace(billingAddress.PhoneNumber) ||
            string.IsNullOrWhiteSpace(billingAddress.StreetAddress) ||
            string.IsNullOrWhiteSpace(billingAddress.City) ||
            string.IsNullOrWhiteSpace(billingAddress.PostalCode) ||
            string.IsNullOrWhiteSpace(billingAddress.AddressType))
        {
            ErrorMessage = "Please fill in all required fields.";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("https://numnumfoods-api.azurewebsites.net/api/billingaddress", billingAddress);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Billing address added successfully.");
                Navigation.NavigateTo("/profile/billing-information");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to add billing address: {errorContent}");
                ErrorMessage = "Failed to add billing address.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding billing address: {ex.Message}");
            ErrorMessage = "An error occurred while adding the billing address.";
        }
    }

    // Logic to cancel and navigate back
    private void Cancel()
    {
        Navigation.NavigateTo("/profile/billing-information");
    }

    public class BillingAddress
    {
        public int AddressId { get; set; }
        public int UserId { get; set; } // Foreign key to Users table
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string StreetAddress { get; set; }
        public string ComplexBuilding { get; set; } // Optional
        public string Suburb { get; set; }
        public string City { get; set; }
        public string Province { get; set; }
        public string PostalCode { get; set; }
        public string AddressType { get; set; } // e.g., "Residential", "Business"
    }
}
