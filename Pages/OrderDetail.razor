@page "/profile/orderdetails/{orderId:int}"
@inject HttpClient Http
@using NumNumFoods.Services
@inject UserState UserState
@inject NavigationManager Navigation
@using System.Net.Http.Json

@code {
    [Parameter] public int orderId { get; set; }

    private Order order;

    protected override async Task OnInitializedAsync()
    {
        int userId = UserState.UserId;

        if (userId == 0)
        {
            // User is not logged in; redirect to login page
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadOrderDetails(orderId, userId);
    }

    private async Task LoadOrderDetails(int orderId, int userId)
    {
        try
        {
            var response = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/order/{orderId}");
            if (response.IsSuccessStatusCode)
            {
                var fetchedOrder = await response.Content.ReadFromJsonAsync<Order>();
                if (fetchedOrder.CustomerId != userId)
                {
                    // The order does not belong to the current user
                    Console.WriteLine("Unauthorized access to order.");
                    Navigation.NavigateTo("/profile/orderhistory");
                    return;
                }
                order = fetchedOrder;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Console.WriteLine($"Order with ID {orderId} not found.");
                Navigation.NavigateTo("/profile/orderhistory");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to load order: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in LoadOrderDetails: {ex.Message}");
        }
    }

    public class Order
    {
        public int OrderId { get; set; }
        public int CustomerId { get; set; }
        public int BranchId { get; set; }
        public decimal TotalPrice { get; set; }
        public string Status { get; set; } // e.g., "Pending", "Completed"
        public DateTime OrderDate { get; set; }
        public List<OrderItem> OrderItems { get; set; } = new List<OrderItem>();
    }

    public class OrderItem
    {
        public int OrderItemId { get; set; }
        public int OrderId { get; set; } // Foreign key to Orders table
        public int ProductId { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; } // Price at the time of ordering
        public string ProductName { get; set; }
        public string ImageUrl { get; set; }
    }
}

@if (order == null)
{
    <p>Loading order details...</p>
}
else
{
    <div class="order-detail-page">
        <h1 class="order-detail-title">Order #@order.OrderId</h1>
        <p class="order-detail-meta">ORDERED @order.OrderDate.ToString("dd MMM yyyy") | STATUS: @order.Status</p>

        <div class="order-summary-section">
            <div class="summary-item">
                <h3>Order Summary</h3>
                <p>@order.OrderItems.Count Items</p>
                
                <p><strong>Order Total: R @order.TotalPrice</strong></p>
                <!-- You can include more payment details if available -->
            </div>

            <div class="payment-method-section">
                <h3>Payment Method</h3>
                <p>In Person</p> <!-- Update this if you have payment method data -->
            </div>
        </div>

        <div class="order-items-section">
            <h3>Order Items</h3>

            @foreach (var item in order.OrderItems)
            {
                <div class="order-item">
                    <img src="@item.ImageUrl" alt="@item.ProductName" class="order-item-image" />
                    <div class="order-item-details">
                        <p><strong>@item.ProductName</strong></p>
                        <p>Qty: @item.Quantity</p>
                        <p>R @item.Price</p>
                      
                    </div>
                </div>
            }
        </div>

     
    </div>
}
