@page "/manage-vouchers"
@inject HttpClient Http
@inject NavigationManager Navigation
@using NumNumFoods.Models
@inject IJSRuntime JSRuntime

<div class="voucher-management">
    <h1>Voucher Management</h1>

    <div class="new-voucher">
        <h2>New voucher</h2>
        <div class="voucher-inputs">
            <input type="text" placeholder="Voucher Code" @bind="VoucherCode" />
            <input type="date" @bind="ExpiryDate" />
            <input type="number" placeholder="Max uses" @bind="MaxUses" />
            <input type="number" placeholder="% Discount" @bind="DiscountPercent" />
            <button @onclick="CreateVoucher">Create Voucher</button>
        </div>
    </div>

    <div class="active-vouchers">
        <h2>Active Vouchers</h2>
        <table>
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Expiry Date</th>
                    <th>Uses left</th>
                    <th>Discount</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var voucher in Vouchers)
                {
                    <tr>
                        <td>@voucher.Code</td>
                        <td>@voucher.ExpiryDate.ToString("dd MMM yyyy")</td>
                        <td>@(voucher.MaxUses.HasValue ? $"{voucher.Uses}/{voucher.MaxUses}" : "No Limit")</td>
                        <td>@voucher.DiscountPercent%</td>
                        <td>
                            @if (voucher.Uses < voucher.MaxUses)
                            {
                                <span class="active">Active</span>
                            }
                            else
                            {
                                <span class="limit-reached">Limit Reached</span>
                            }
                        </td>
                        <td>
                            <button class="delete-button" @onclick="() => ConfirmDelete(voucher.VoucherId)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private string VoucherCode { get; set; } = string.Empty;
    private DateTime ExpiryDate { get; set; } = DateTime.Now;
    private int? MaxUses { get; set; }
    private int DiscountPercent { get; set; }
    private List<Voucher> Vouchers { get; set; } = new List<Voucher>();

    protected override async Task OnInitializedAsync()
    {
        await FetchActiveVouchers();
    }

    private async Task CreateVoucher()
    {
        var newVoucher = new Voucher
            {
                Code = VoucherCode,
                ExpiryDate = ExpiryDate,
                MaxUses = MaxUses,
                DiscountPercent = DiscountPercent
            };

        var response = await Http.PostAsJsonAsync("https://numnumfoods-api.azurewebsites.net/api/voucher/create", newVoucher);

        if (response.IsSuccessStatusCode)
        {
            // Successfully created the voucher, fetch the updated list
            await FetchActiveVouchers();
            ClearInputs();
        }
        else
        {
            // Handle error (e.g., show a message)
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error creating voucher: {errorMessage}");
        }
    }

    private async Task ConfirmDelete(int voucherId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this voucher?");

        if (confirmed)
        {
            var response = await Http.DeleteAsync($"https://numnumfoods-api.azurewebsites.net/api/voucher/delete/{voucherId}");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Voucher deleted successfully.");
                await FetchActiveVouchers(); // Refresh the list
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error deleting voucher: {errorMessage}");
            }
        }
    }

    private async Task FetchActiveVouchers()
    {
        var response = await Http.GetAsync("https://numnumfoods-api.azurewebsites.net/api/voucher/getAll");

        if (response.IsSuccessStatusCode)
        {
            Vouchers = await response.Content.ReadFromJsonAsync<List<Voucher>>();
        }
        else
        {
            // Handle error (e.g., show a message)
            Console.WriteLine("Error fetching vouchers.");
        }
    }

    private void ClearInputs()
    {
        VoucherCode = string.Empty;
        ExpiryDate = DateTime.Now;
        MaxUses = null;
        DiscountPercent = 0;
    }
}


