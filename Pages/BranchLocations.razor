@page "/branchlocations"
@inject HttpClient Http
@inject NavigationManager Navigation

@code {
    // Branch model
    public class Branch
    {
        public int BranchId { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string ZipCode { get; set; }
        public string PhoneNumber { get; set; }
    }

    // List to store branches from API
    private List<Branch> branches = new List<Branch>();

    // Loading and error flags
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    // Fetch all branches when component initializes
    protected override async Task OnInitializedAsync()
    {
        await LoadBranches();
    }

    // Method to fetch branches from the API
    private async Task LoadBranches()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // API call to get all branches
            branches = await Http.GetFromJsonAsync<List<Branch>>("https://numnumfoods-api.azurewebsites.net/api/branch/getAll");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while fetching branches: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // Method to delete a branch by ID
    private async Task DeleteBranch(int branchId)
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // API call to delete the branch
            var response = await Http.DeleteAsync($"https://numnumfoods-api.azurewebsites.net/api/branch/delete/{branchId}");

            if (response.IsSuccessStatusCode)
            {
                // Remove the deleted branch from the list
                branches.RemoveAll(b => b.BranchId == branchId);
            }
            else
            {
                errorMessage = $"Failed to delete branch. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while deleting the branch: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // Method to navigate to the "Add New Branch" page
    private void NavigateToAddBranch()
    {
        Navigation.NavigateTo("/new-branch");
    }
}

<div class="branch-management">
    <h1>Branch Locations</h1>

    <!-- Button to navigate to Add New Branch Page -->
    <button @onclick="NavigateToAddBranch" class="add-new-branch-button">Add New Branch</button>

    <h2>Branch List</h2>

    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error-message">@errorMessage</p>
    }
    else if (branches != null && branches.Count > 0)
    {
        <table class="branch-list-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Address</th>
                    <th>City</th>
                    <th>State</th>
                    <th>Zip Code</th>
                    <th>Phone Number</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var branch in branches)
                {
                    <tr>
                        <td>@branch.Name</td>
                        <td>@branch.Address</td>
                        <td>@branch.City</td>
                        <td>@branch.State</td>
                        <td>@branch.ZipCode</td>
                        <td>@branch.PhoneNumber</td>
                        <td>
                            <button @onclick="() => DeleteBranch(branch.BranchId)" class="delete-button">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No branches found.</p>
    }
</div>