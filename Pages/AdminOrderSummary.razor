@page "/admin/orders/summary/{orderId:int}"
@inject NavigationManager Navigation
@inject HttpClient Http

@code {
    [Parameter] public int orderId { get; set; }

    private OrderWithCustomer order;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderDetails(orderId);
    }

    private async Task LoadOrderDetails(int orderId)
    {
        try
        {
            var response = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/order/admin/summary/{orderId}");
            if (response.IsSuccessStatusCode)
            {
                order = await response.Content.ReadFromJsonAsync<OrderWithCustomer>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Console.WriteLine($"Order with ID {orderId} not found.");
                // Optionally, navigate to a not found page or display a message
                Navigation.NavigateTo("/admin/orders");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to load order: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in LoadOrderDetails: {ex.Message}");
        }
    }

    public class OrderWithCustomer
    {
        public int OrderId { get; set; }
        public int CustomerId { get; set; }
        public string CustomerName { get; set; } // Customer's FullName
        public string PhoneNumber { get; set; }  // Customer's phone number
        public int BranchId { get; set; }
        public decimal TotalPrice { get; set; }
        public string Status { get; set; } // e.g., "Pending", "Processing", "Completed", "Cancelled"
        public DateTime OrderDate { get; set; }
        public List<OrderItem> OrderItems { get; set; } = new List<OrderItem>();
        // Removed PaymentMethod as it doesn't exist in your database
    }

    public class OrderItem
    {
        public int OrderItemId { get; set; }
        public int OrderId { get; set; } // Foreign key to Orders table
        public int ProductId { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; } // Price at the time of ordering
        public string ProductName { get; set; }
        public string ImageUrl { get; set; }
    }
}

@if (order == null)
{
    <p>Loading order details...</p>
}
else
{
    <div class="order-summary">
        <h1>Order Summary for Order #@order.OrderId</h1>
        <h2>Customer: @order.CustomerName</h2>
        <p>Phone Number: @order.PhoneNumber</p>
        <p>Order Date: @(order.OrderDate.ToString("dd/MM/yyyy HH:mm"))</p>
        <p>Status: @order.Status</p>
        <p>Total Items: @order.OrderItems.Count</p>
        <p>Total Amount: R@(order.TotalPrice.ToString("N2"))</p>

        <div class="order-items">
            @foreach (var item in order.OrderItems)
            {
                <div class="order-item">
                    <div class="item-details">
                        <h3>@item.ProductName</h3>
                        <p><strong>Quantity:</strong> @item.Quantity</p>
                        <p><strong>Price:</strong> R@(item.Price.ToString("N2"))</p>
                        <p><strong>Total:</strong> R@((item.Price * item.Quantity).ToString("N2"))</p>
                    </div>

                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                    {
                        <div class="item-image">
                            <img src="@item.ImageUrl" alt="@item.ProductName" />
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}
