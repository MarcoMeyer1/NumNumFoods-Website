@page "/add-stock"
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="add-stock-container">
    <h1>Add New Stock</h1>

    <div class="stock-form">
        <!-- Product Input -->
        <label for="product">Product Name</label>
        <input type="text" id="product" placeholder="Enter product name" @bind="newStock.Product" />


        <label for="location">Branch Location</label>
        <select id="location" @bind="newStock.Location">
            @foreach (var branch in branches)

            {
                <option value="@branch.Name">@branch.Name</option>
            }
        </select>

        <!-- Quantity Input -->
        <label for="quantity">Quantity</label>
        <input type="number" id="quantity" placeholder="Enter quantity" @bind="newStock.Quantity" />

        <!-- Buttons: Add Stock and Cancel -->
        <div class="button-container">
            <button class="add-stock-button" @onclick="AddNewStock">Add Stock</button>
            <button class="cancel-button" @onclick="Cancel">Cancel</button>
        </div>
    </div>
</div>

@code {
    private StockItem newStock = new StockItem();
    private List<Branch> branches = new List<Branch>();
    private string errorMessage;
    private string successMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadBranches();
    }

    private async Task LoadBranches()
    {
        try
        {
            // Fetch branches from the API
            branches = await Http.GetFromJsonAsync<List<Branch>>("https://numnumfoods-api.azurewebsites.net/api/branch/getAll");

            // Set default branch if any
            if (branches.Any())
            {
                newStock.Location = branches.First().Name;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading branches: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task AddNewStock()
    {
        if (string.IsNullOrEmpty(newStock.Product) || string.IsNullOrEmpty(newStock.Location) || newStock.Quantity <= 0)
        {
            errorMessage = "Please fill out all fields with valid data.";
            return;
        }

        errorMessage = null;

        try
        {
            // Determine the stock status based on the quantity
            newStock.Status = newStock.Quantity <= 10 ? "Low on Stock" : "In Stock";

            // Make an API call to create the new stock item
            var response = await Http.PostAsJsonAsync("https://numnumfoods-api.azurewebsites.net/api/stock/create", newStock);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Stock item added successfully.";
              
                newStock = new StockItem
                    {
                        Location = branches.FirstOrDefault()?.Name
                    };
                Console.WriteLine(successMessage);
                Navigation.NavigateTo("/manage-stock");
            }
            else
            {
                errorMessage = $"Error adding stock item: {response.ReasonPhrase}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding stock item: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/manage-stock");
    }

    // StockItem class
    public class StockItem
    {
        public int Id { get; set; }
        public string Product { get; set; }
        public string Location { get; set; }
        public int Quantity { get; set; }
        public string Status { get; set; }
    }

    // Branch class
    public class Branch
    {
        public int BranchId { get; set; }
        public string Name { get; set; }
    
        public string Address { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string ZipCode { get; set; }
        public string PhoneNumber { get; set; }
    }
}
