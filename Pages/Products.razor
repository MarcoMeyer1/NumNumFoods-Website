@page "/products"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using NumNumFoods.Models
@using NumNumFoods.Services
@inject UserState UserState

<PageTitle>Products</PageTitle>

<h1 align="center">Our Products</h1>

<section class="product-page">

    <div class="filters-and-search">
        <input type="text"
               placeholder="Search for products..."
               class="search-bar"
               @oninput="e => OnSearchChanged(e.Value.ToString())" />

        <select class="sort-dropdown" @onchange="SortProducts">
            <option value="default">Sort</option>
            <option value="price-asc">Price - Low to High</option>
            <option value="price-desc">Price - High to Low</option>
        </select>
    </div>

    <div class="category-buttons">
        <button class="filter-btn" @onclick="() => SelectCategory(null)">All</button> <!-- Show all products -->
        @foreach (var category in uniqueCategories)
        {
            <button class="filter-btn" @onclick="() => SelectCategory(category)">@category</button>
        }
    </div>

    @if (groupedProducts != null && groupedProducts.Any())
    {
        @foreach (var categoryGroup in groupedProducts)
        {
            if (selectedCategory == null || selectedCategory == categoryGroup.Key)
            {
                <h2 id="category-@SanitizeCategoryName(categoryGroup.Key)">@(categoryGroup.Key ?? "Uncategorized")</h2>
                <div class="horizontal-scroll">
                    <div class="product-grid">
                        @foreach (var product in categoryGroup)
                        {
                            <div class="product-card">
                                <img src="@product.ImageUrl" alt="@product.Name" />
                                <h3>@product.Name</h3>
                                <p>@product.Description</p>
                                <p>Price: R @product.Price.ToString("N2")</p>
                                <div class="button-container">
                                    <button class="add-to-cart-btn" @onclick="() => AddToCart(product)">Add to cart</button>
                                    <button class="more-info-btn" @onclick="() => GoToProductDetails(product.ProductId)">More info</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    }
    else
    {
        <p>Loading products...</p>
    }

</section>

@code {
    private string selectedCategory { get; set; } = null;

    private string searchTerm { get; set; } = "";
    private string selectedSort { get; set; } = "default";
    private List<string> filterTags = new() { "For Babies", "6+ Months", "7+ Months", "Nutritious", "Smooth Texture" };
    private List<Product> allProducts = new();
    private IEnumerable<IGrouping<string, Product>> groupedProducts = Enumerable.Empty<IGrouping<string, Product>>();
    private List<Product> filteredProducts = new();
    private List<string> uniqueCategories = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        ExtractUniqueCategories();
        FilterAndGroupProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            var response = await Http.GetAsync("https://numnumfoods-api.azurewebsites.net/api/product/getAll");
            if (response.IsSuccessStatusCode)
            {
                allProducts = await response.Content.ReadFromJsonAsync<List<Product>>();
                foreach (var product in allProducts)
                {
                    product.Rating = 0; // Default rating
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to load products: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in LoadProducts: {ex.Message}");
        }
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }

    private void ExtractUniqueCategories()
    {
        uniqueCategories = allProducts
            .Select(p => p.CategoryName ?? "Uncategorized")
            .Distinct()
            .OrderBy(c => c)
            .ToList();
    }

    private void OnSearchChanged(string value)
    {
        searchTerm = value;
        FilterAndGroupProducts();
    }

    private void FilterAndGroupProducts()
    {
        filteredProducts = allProducts
            .Where(p => string.IsNullOrEmpty(searchTerm) ||
                        p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if (selectedSort == "price-asc")
        {
            filteredProducts = filteredProducts.OrderBy(p => p.Price).ToList();
        }
        else if (selectedSort == "price-desc")
        {
            filteredProducts = filteredProducts.OrderByDescending(p => p.Price).ToList();
        }

        groupedProducts = filteredProducts.GroupBy(p => p.CategoryName ?? "Uncategorized");
    }

    private void SortProducts(ChangeEventArgs e)
    {
        selectedSort = e.Value?.ToString() ?? "default";
        FilterAndGroupProducts();
    }

    private async Task AddToCart(Product product)
    {
        int userId = UserState.UserId;

        if (userId == 0)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var cartItem = new CartItem
            {
                UserId = userId,
                ProductId = product.ProductId,
                Quantity = 1,
                Price = product.Price
            };

        await AddToCartAsync(cartItem);
        NavigationManager.NavigateTo("/cart");
        await JSRuntime.InvokeVoidAsync("alert", "Product added to cart.");
    }

    private async Task AddToCartAsync(CartItem cartItem)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://numnumfoods-api.azurewebsites.net/api/cart/add", cartItem);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Product added to cart successfully.");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to add product to cart: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in AddToCartAsync: {ex.Message}");
        }
    }

    private void GoToProductDetails(int productId)
    {
        NavigationManager.NavigateTo($"/product-details/{productId}");
    }

    private string SanitizeCategoryName(string categoryName)
    {
        var sanitizedCategory = categoryName.Replace(" ", "-").Replace("&", "and").Replace("'", "").ToLower();
        return sanitizedCategory;
    }

    public class Product
    {
        public int ProductId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string ImageUrl { get; set; }
        public decimal Price { get; set; }
        public int Rating { get; set; }
        public string CategoryName { get; set; }
    }

    public class CartItem
    {
        public int UserId { get; set; }
        public int ProductId { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
}
