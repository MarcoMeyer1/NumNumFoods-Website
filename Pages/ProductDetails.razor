@page "/product-details/{ProductId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using NumNumFoods.Models
@using NumNumFoods.Services
@inject UserState UserState


<PageTitle>@product?.Name ?? "Product Details"</PageTitle>

@if (product == null)
{
    <p>Loading product details...</p>
}
else
{
    <h1 class="product-title">@product.Name</h1>

    <div class="product-details-page">
        <!-- Product Card -->
        <div class="product-card">
            <img src="@product.ImageUrl" alt="@product.Name" class="product-image" />
            <div class="product-description">
                <h2>@product.Name</h2>
                <p>@product.Description</p>
                <p>Price: R @product.Price.ToString("N2")</p>

                <div class="product-rating">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <span class="rating-star @(product.Rating >= i ? "filled" : "")">⭐</span>
                    }
                </div>

                <button class="add-to-cart-btn" @onclick="AddToCart">Add to cart</button>
            </div>
        </div>

        <!-- Review Section -->
        <div class="review-section">
            <h3>Leave a Review</h3>
            <textarea placeholder="Write your review here..." @bind="reviewText"></textarea>
            <div class="rating-input">
                @for (int i = 1; i <= 5; i++)
                {
                    <span class="rating-star @(userRating >= i ? "selected" : "")"
                          @onclick="() => SetRating(i)">⭐</span>
                }
            </div>
            <button class="submit-review-btn" @onclick="SubmitReview">Submit Review</button>
        </div>
    </div>
}

@code {
    [Parameter] public int ProductId { get; set; }

    private Product product;
    private string reviewText = "";
    private int userRating = 0;

    protected override async Task OnInitializedAsync()
    {
        await FetchProductDetails();
    }

    private async Task FetchProductDetails()
    {
        try
        {
            var response = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/product/getById/{ProductId}");
            if (response.IsSuccessStatusCode)
            {
                product = await response.Content.ReadFromJsonAsync<Product>();
            }
            else
            {
                Console.WriteLine($"Failed to fetch product details: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching product details: {ex.Message}");
        }
    }

    private async Task AddToCart()
    {
        if (UserState.UserId == 0)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var cartItem = new CartItem
            {
                UserId = UserState.UserId,
                ProductId = ProductId,
                Quantity = 1,
                Price = product.Price
            };

        try
        {
            var response = await Http.PostAsJsonAsync("https://numnumfoods-api.azurewebsites.net/api/cart/add", cartItem);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Product added to cart.");
            }
            else
            {
                Console.WriteLine($"Failed to add to cart: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding product to cart: {ex.Message}");
        }
    }

    private async Task SubmitReview()
    {
        if (string.IsNullOrWhiteSpace(reviewText) || userRating == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please provide both a review and a rating.");
            return;
        }

        var review = new ProductReview
            {
                ProductId = ProductId,
                UserId = UserState.UserId,
                Rating = userRating,
                Text = reviewText,
                Date = DateTime.UtcNow
            };

        try
        {
            var response = await Http.PostAsJsonAsync("https://numnumfoods-api.azurewebsites.net/api/review/add", review);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Thank you for your review!");
                reviewText = "";
                userRating = 0;
            }
            else
            {
                Console.WriteLine($"Failed to submit review: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting review: {ex.Message}");
        }
    }

    private void SetRating(int rating)
    {
        userRating = rating;
    }

    public class Product
    {
        public int ProductId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string ImageUrl { get; set; }
        public decimal Price { get; set; }
        public int Rating { get; set; }
    }

    public class ProductReview
    {
        public int ProductId { get; set; }
        public int UserId { get; set; }
        public int Rating { get; set; }
        public string Text { get; set; }
        public DateTime Date { get; set; }
    }

    public class CartItem
    {
        public int UserId { get; set; }
        public int ProductId { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
}