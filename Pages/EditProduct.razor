@page "/edit-product/{ProductId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@using NumNumFoods.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers

<h1>Edit Product</h1>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}
else
{
    <div class="edit-product-form">
        <!-- Product Name Input -->
        <label for="name">Product Name</label>
        <input type="text" id="name" placeholder="Enter product name" @bind="product.Name" />

        <!-- Description Input -->
        <label for="description">Product Description</label>
        <textarea id="description" placeholder="Enter product description" @bind="product.Description"></textarea>

        <!-- Price Input -->
        <label for="price">Product Price</label>
        <input type="number" id="price" placeholder="Enter product price" @bind="product.Price" />

        <!-- Stock Quantity Input -->
        <label for="stockQuantity">Stock Quantity</label>
        <input type="number" id="stockQuantity" placeholder="Enter stock quantity" @bind="product.StockQuantity" />

        <!-- Category Dropdown -->
        <label for="category">Category</label>
        <select id="category" @bind="product.CategoryId">
            <option value="">Select Category</option>
            @foreach (var category in Categories)
            {
                <option value="@category.CategoryId">@category.Name</option>
            }
        </select>

        <!-- Current Image Section -->
        <div>
            <label>Current Image:</label><br />
            @if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                <img src="@product.ImageUrl" alt="@product.Name" width="200" />

                <br />
            }
            else
            {
                <span>No Image</span>

                <br />
            }
        </div>

        <!-- File Input for New Image -->
        <InputFile id="imageUpload" OnChange="OnFileChange" />

        <div class="button-container">
            <button @onclick="SubmitUpdatedProduct">Save Changes</button>
            <button @onclick="CancelEdit">Cancel</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    private Product product = new Product();
    private bool isLoading = true;
    private string errorMessage;
    private IBrowserFile selectedFile;
    private List<ProductCategory> Categories { get; set; } = new List<ProductCategory>();

    protected override async Task OnInitializedAsync()
    {
        await FetchCategories();
        await FetchProduct();
    }

    private async Task FetchProduct()
    {
        try
        {
            var response = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/product/{ProductId}");
            if (response.IsSuccessStatusCode)
            {
                product = await response.Content.ReadFromJsonAsync<Product>();
            }
            else
            {
                errorMessage = $"Failed to load product with ID {ProductId}.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching product: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FetchCategories()
    {
        try
        {
            var response = await Http.GetAsync("https://numnumfoods-api.azurewebsites.net/api/productcategory/getAll");
            if (response.IsSuccessStatusCode)
            {
                Categories = await response.Content.ReadFromJsonAsync<List<ProductCategory>>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to fetch categories: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching categories: {ex.Message}");
        }
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        Console.WriteLine($"File selected: {selectedFile.Name}");
    }

    private async Task SubmitUpdatedProduct()
    {
        try
        {
            // If a new image has been selected, upload it
            if (selectedFile != null)
            {
                var newImageUrl = await UploadFile(selectedFile);
                if (newImageUrl == null)
                {
                    Console.WriteLine("Image upload failed.");
                    return; // Stop if the image upload fails
                }
                product.ImageUrl = newImageUrl;
            }

            // Retrieve the CategoryName from the dropdown using the CategoryId
            if (product.CategoryId.HasValue)
            {
                var selectedCategory = Categories.FirstOrDefault(c => c.CategoryId == product.CategoryId);
                if (selectedCategory != null)
                {
                    product.CategoryName = selectedCategory.Name;
                }
            }

            Console.WriteLine($"Updating product: Name = {product.Name}, Category = {product.CategoryName}, ImageUrl = {product.ImageUrl}");

            // Update the product
            var response = await Http.PutAsJsonAsync($"https://numnumfoods-api.azurewebsites.net/api/product/update/{ProductId}", product);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/manage-products");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error updating product: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in SubmitUpdatedProduct: {ex.Message}");
        }
    }


    private async Task<string> FetchCategoryNameById(int categoryId)
    {
        var response = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/productcategory/{categoryId}");
        if (response.IsSuccessStatusCode)
        {
            var category = await response.Content.ReadFromJsonAsync<ProductCategory>();
            return category?.Name;
        }
        return null;
    }


    private async Task<string> UploadFile(IBrowserFile file)
    {
        try
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)); // 10 MB max size
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(fileContent, "file", file.Name);

            Console.WriteLine($"Uploading file: {file.Name}");

            var response = await Http.PostAsync("https://numnumfoods-api.azurewebsites.net/api/product/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var imageUrl = await response.Content.ReadAsStringAsync();
                // Trim quotes if necessary
                imageUrl = imageUrl.Trim('"');
                Console.WriteLine($"File uploaded successfully. Image URL: {imageUrl}");
                return imageUrl; // Return the image URL
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error during file upload: {errorMessage}");
                return null; // Handle the failure gracefully
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during file upload: {ex.Message}");
            return null; // Handle the failure gracefully
        }
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/manage-products");
    }
}
