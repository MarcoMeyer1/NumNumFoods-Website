@page "/new-card"
@inject NavigationManager Navigation
@inject HttpClient Http
@using Services
@inject UserState UserState

<div class="new-card-container">
    <h1 class="title">Add New Card</h1>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="error-message">@ErrorMessage</div>
    }

    <form class="card-form" @onsubmit="HandleValidSubmit">
        <div class="form-group">
            <label for="nameOnCard">Name on Card</label>
            <input type="text" id="nameOnCard" placeholder="Enter name on card" @bind="card.NameOnCard" required>
        </div>

        <div class="form-group">
            <label for="cardNumber">Card Number</label>
            <input type="text" id="cardNumber" placeholder="Enter card number" @bind="card.CardNumber" required>
        </div>

        <div class="form-group">
            <label for="expiryDate">Expiry Date</label>
            <div class="expiry-date-group">
                <select id="expiryMonth" @bind="card.ExpiryMonth" required>
                    <option value="">Month</option>
                    @for (int month = 1; month <= 12; month++)
                    {
                        <option value="@month.ToString("D2")">@month.ToString("D2")</option>
                    }
                </select>
                <select id="expiryYear" @bind="card.ExpiryYear" required>
                    <option value="">Year</option>
                    @for (int year = DateTime.Now.Year; year <= DateTime.Now.Year + 20; year++)
                    {
                        <option value="@year">@year</option>
                    }
                </select>
            </div>
        </div>

        <!-- Removed CVV field due to security considerations -->

        <div class="form-group">
            <label for="straightBudget">Straight/Budget</label>
            <select id="straightBudget" @bind="card.PaymentOption">
                <option value="Straight">Straight</option>
                <option value="Budget">Budget</option>
            </select>
            <small>South African issued cards only</small>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
            <button type="submit" class="save-button">Save Card</button>
            <button type="button" class="cancel-button" @onclick="Cancel">Cancel</button>
        </div>
    </form>
</div>

@code {
    private PaymentMethod card = new PaymentMethod();
    private string ErrorMessage;

    protected override void OnInitialized()
    {
        if (!UserState.IsLoggedIn)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Ensure UserId is set
        card.UserId = UserState.UserId;
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = string.Empty;

        // Basic validation
        if (string.IsNullOrWhiteSpace(card.NameOnCard) ||
            string.IsNullOrWhiteSpace(card.CardNumber) ||
            string.IsNullOrWhiteSpace(card.ExpiryMonth) ||
            string.IsNullOrWhiteSpace(card.ExpiryYear))
        {
            ErrorMessage = "Please fill in all required fields.";
            return;
        }

        // SECURITY WARNING:
        // Handling and storing card data directly is not recommended.
        // Use a payment gateway to handle sensitive card information.

        try
        {
            // Updated the endpoint to match the API
            var response = await Http.PostAsJsonAsync("https://numnumfoods-api.azurewebsites.net/api/paymentmethod/add", card);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Card added successfully.");
                Navigation.NavigateTo("/profile/billing-information");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to add card: {errorContent}");
                ErrorMessage = $"Failed to add card: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding card: {ex.Message}");
            ErrorMessage = $"An error occurred while adding the card: {ex.Message}";
        }
    }

    // Logic to cancel and navigate back
    private void Cancel()
    {
        Navigation.NavigateTo("/profile/billing-information");
    }

    public class PaymentMethod
    {
        public int CardId { get; set; }
        public int UserId { get; set; }
        public string NameOnCard { get; set; }
        public string CardNumber { get; set; } // In production, handle securely
        public string ExpiryMonth { get; set; }
        public string ExpiryYear { get; set; }
        public string PaymentOption { get; set; } = "Straight";
    }
}
