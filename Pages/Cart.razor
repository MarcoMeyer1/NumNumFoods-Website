@page "/cart"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using NumNumFoods.Models
@using NumNumFoods.Services
@inject UserState UserState

<div class="container cart-container">
    <h1>My Cart</h1>
    @if (cartItems == null)
    {
        <p>Loading cart items...</p>
    }
    else if (!cartItems.Any())
    {
        <p>Your cart is empty.</p>
    }
    else
    {
        <div class="cart-content">
            <div class="cart-items">
                @foreach (var item in cartItems)
                {
                    <div class="cart-item">
                        <img src="@item.Product.ImageUrl" alt="@item.Product.Name" class="product-image" />
                        <div class="item-details">
                            <h4>@item.Product.Name</h4>
                            <p>@item.Product.Description</p>
                            <div class="pricing-info">
                                <div>
                                    <span>Each: </span>
                                    <span>@("R" + item.Price)</span>
                                </div>
                                <div>
                                    <span>Quantity: </span>
                                    <div class="quantity-control">
                                        <button @onclick="() => UpdateQuantity(item, -1)">&#8722;</button>
                                        <input type="number" value="@item.Quantity" readonly />
                                        <button @onclick="() => UpdateQuantity(item, 1)">&#43;</button>
                                    </div>
                                </div>
                                <div>
                                    <span>Total: </span>
                                    <span>@("R" + (item.Price * item.Quantity))</span>
                                </div>
                                <button class="remove-btn" @onclick="() => RemoveFromCart(item.CartId)">Remove</button>
                            </div>
                        </div>
                    </div>
                }
                <div class="cart-summary">
                    <div>@cartItems.Count items</div>
                    <div>Total: @("R" + cartItems.Sum(item => item.Price * item.Quantity))</div>
                </div>
            </div>

            <div class="cart-actions">
                <div class="form-group">
                    <label>Enter Voucher Code</label>
                    <input type="text" class="form-control" placeholder="Voucher Code" @bind="voucherCode" />
                    <button class="btn btn-primary" @onclick="ApplyVoucher">Submit</button>
                    @if (!string.IsNullOrEmpty(voucherError))
                    {
                        <p class="error-message">@voucherError</p>
                    }
                </div>

                <div class="form-group">
                    <label>Payment Method:</label>
                    <div class="payment-method">
                        <label for="pay-now">Pay now:</label>
                        <input type="radio" id="pay-now" name="payment" value="Pay now" @onchange="OnPaymentMethodChanged" />
                        <label for="in-person">In person:</label>
                        <input type="radio" id="in-person" name="payment" value="In person" @onchange="OnPaymentMethodChanged" />
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(paymentError))
                {
                    <p class="error-message">@paymentError</p>
                }

                <div class="cart-total">
                    <div>Discount: @("R" + discount)</div>
                    <div>Total: @("R" + (cartItems.Sum(item => item.Price * item.Quantity) - discount))</div>
                </div>

                <button class="btn btn-pink" @onclick="ProceedToCheckout">Checkout</button>
            </div>
        </div>
    }
</div>

@code {
    private List<CartItem> cartItems;
    private string selectedBranch = "Port Elizabeth";
    private string voucherCode = string.Empty;
    private decimal discount = 0M;
    private string paymentMethod = string.Empty;
    private string paymentError = string.Empty;
    private string voucherError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        int userId = UserState.UserId;

        if (userId == 0)
        {
            // User is not logged in; redirect to login page or show a message
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadCartItems(userId);
    }

    private void OnPaymentMethodChanged(ChangeEventArgs e)
    {
        paymentMethod = e.Value.ToString();
        paymentError = string.Empty;
    }

    private async Task LoadCartItems(int userId)
    {
        try
        {
            var response = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/cart/user/{userId}");
            if (response.IsSuccessStatusCode)
            {
                var cartItemsFromApi = await response.Content.ReadFromJsonAsync<List<CartItem>>();
                // Fetch product details for each cart item
                foreach (var item in cartItemsFromApi)
                {
                    var productResponse = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/product/{item.ProductId}");
                    if (productResponse.IsSuccessStatusCode)
                    {
                        item.Product = await productResponse.Content.ReadFromJsonAsync<Product>();
                    }
                }
                cartItems = cartItemsFromApi;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to load cart items: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in LoadCartItems: {ex.Message}");
        }
    }

    private async Task UpdateQuantity(CartItem item, int change)
    {
        int newQuantity = item.Quantity + change;
        if (newQuantity >= 1)
        {
            item.Quantity = newQuantity;
            var response = await Http.PutAsJsonAsync($"https://numnumfoods-api.azurewebsites.net/api/cart/update/{item.CartId}", item.Quantity);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Cart item quantity updated.");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to update cart item quantity: {error}");
            }
        }
    }

    private async Task RemoveFromCart(int cartId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this item from the cart?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"https://numnumfoods-api.azurewebsites.net/api/cart/remove/{cartId}");
            if (response.IsSuccessStatusCode)
            {
                cartItems.RemoveAll(item => item.CartId == cartId);
                Console.WriteLine("Item removed from cart.");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to remove item from cart: {error}");
            }
        }
    }

    private async Task ApplyVoucher()
    {
        voucherError = string.Empty;
        if (string.IsNullOrEmpty(voucherCode))
        {
            voucherError = "Please enter a voucher code.";
            return;
        }

        try
        {
            var response = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/voucher/apply/{voucherCode}");
            if (response.IsSuccessStatusCode)
            {
                var voucher = await response.Content.ReadFromJsonAsync<Voucher>();
                if (voucher != null && voucher.DiscountPercent > 0)
                {
                    discount = cartItems.Sum(item => item.Price * item.Quantity) * voucher.DiscountPercent / 100;
                    await UpdateVoucherUsage(voucher.VoucherId, voucher.Uses + 1);
                }
            }
            else
            {
                voucherError = "Invalid or expired voucher code.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in ApplyVoucher: {ex.Message}");
            voucherError = "An error occurred while applying the voucher.";
        }
    }

    private async Task UpdateVoucherUsage(int voucherId, int newUses)
    {
        var updateModel = new { Uses = newUses };
        var response = await Http.PutAsJsonAsync($"https://numnumfoods-api.azurewebsites.net/api/voucher/update-uses/{voucherId}", updateModel);
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Failed to update voucher usage.");
        }
    }

    private void ProceedToCheckout()
    {
        if (string.IsNullOrEmpty(paymentMethod))
        {
            paymentError = "Please select a payment method before proceeding to checkout.";
            return;
        }

        Navigation.NavigateTo("/checkout");
    }

    public class CartItem
    {
        public int CartId { get; set; }
        public int UserId { get; set; }
        public int ProductId { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
        public Product Product { get; set; }
    }

    public class Product
    {
        public int ProductId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string ImageUrl { get; set; }
        public decimal Price { get; set; }
    }
}
