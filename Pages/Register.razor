@page "/register"
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="register-page">
    <div class="register-left">
        <div class="image-container">
            <img src="/Assets/register-background1.jpg" alt="Left Image" class="left-image" />
        </div>
    </div>

    <div class="register-middle">
        <h2 class="register-title">Register</h2>
        <div class="register-form">

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="error-message">@ErrorMessage</div>
            }

            <input type="text" id="fullname" @bind="FullName" placeholder="Full name" />
            @if (ShowFullNameError)
            {
                <div class="validation-error">Full Name is required</div>
            }

            <input type="email" id="email" @bind="Email" placeholder="Email" />
            @if (ShowEmailError)
            {
                <div class="validation-error">Please enter a valid email</div>
            }

            <input type="password" id="password" @bind="Password" placeholder="Password" />
            @if (ShowPasswordError)
            {
                <div class="validation-error">Password must be at least 6 characters</div>
            }

            <input type="password" id="confirm-password" @bind="ConfirmPassword" placeholder="Confirm password" />
            @if (ShowConfirmPasswordError)
            {
                <div class="validation-error">Passwords do not match</div>
            }

            <input type="text" id="phone-number" @bind="PhoneNumber" placeholder="Phone Number (optional)" />

            <button @onclick="RegisterUser" class="create-account-button">Create Account</button>
            <a href="/login" class="login-instead">Login Instead</a>

        </div>
    </div>

    <div class="register-right">
        <div class="image-container">
            <img src="/Assets/register-background2.jpg" alt="Right Image" class="right-image" />
        </div>
    </div>
</div>

@code {
    private string FullName { get; set; } = string.Empty;
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;
    private string PhoneNumber { get; set; } = string.Empty;

    private string ErrorMessage { get; set; } = string.Empty;

    private bool ShowFullNameError { get; set; } = false;
    private bool ShowEmailError { get; set; } = false;
    private bool ShowPasswordError { get; set; } = false;
    private bool ShowConfirmPasswordError { get; set; } = false;

    private async Task RegisterUser()
    {
        ShowFullNameError = ShowEmailError = ShowPasswordError = ShowConfirmPasswordError = false;
        ErrorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(FullName))
        {
            ShowFullNameError = true;
            return;
        }

        if (!IsValidEmail(Email))
        {
            ShowEmailError = true;
            return;
        }

        if (Password.Length < 6)
        {
            ShowPasswordError = true;
            return;
        }

        if (Password != ConfirmPassword)
        {
            ShowConfirmPasswordError = true;
            return;
        }

        try
        {
            var registrationData = new
            {
                FullName = FullName,
                Email = Email,
                Password = Password,
                PhoneNumber = string.IsNullOrWhiteSpace(PhoneNumber) ? null : PhoneNumber
            };

            var response = await Http.PostAsJsonAsync("https://numnumfoods-api.azurewebsites.net/api/authentication/register", registrationData);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Registration failed: {errorResponse}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}
