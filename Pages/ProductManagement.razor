@page "/manage-products"
@inject HttpClient Http
@inject NavigationManager Navigation
@using NumNumFoods.Models
@inject IJSRuntime JSRuntime


<div class="product-management">
    <h1>Product Management</h1>

    <div class="product-inputs">
        <button @onclick="CreateNewProduct">Add New Product</button>
        <button @onclick="CreateNewCategory">Add New Category</button>
    </div>

    <h2>Product List</h2>
    <table>
        <thead>
            <tr>
                <th>Image</th> <!-- New Image Column -->
                <th>Product</th>
                <th>Description</th> <!-- Added Description Column -->
                <th>Price</th>
                <th>Quantity</th>
                <th>Stock Status</th> <!-- Added Stock Status Column -->
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img src="@product.ImageUrl" alt="@product.Name" width="100" />
                        }
                        else
                        {
                            <span>No Image</span>
                        }
                    </td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>R@product.Price</td>
                    <td>@product.StockQuantity</td>
                    <td>@product.StockStatus</td>
                    <td>
                        <button @onclick="() => EditProduct(product.ProductId)">Edit</button>
                        <button @onclick="() => DeleteProduct(product.ProductId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Category List</h2>
    <table>
        <thead>
            <tr>
                <th>Category Name</th>
                <th>Age Range</th>
                <th>Container Size</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in Categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>@category.AgeRange</td>
                    <td>@category.ContainerSize</td>
                    <td>
                        <button @onclick="() => DeleteCategory(category.CategoryId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Product> Products { get; set; } = new List<Product>();
    private List<ProductCategory> Categories { get; set; } = new List<ProductCategory>();

    protected override async Task OnInitializedAsync()
    {
        await FetchProducts();
        await FetchCategories();
    }

    private async Task FetchProducts()
    {
        var response = await Http.GetAsync("https://numnumfoods-api.azurewebsites.net/api/product/getAll");
        if (response.IsSuccessStatusCode)
        {
            Products = await response.Content.ReadFromJsonAsync<List<Product>>();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to fetch products: {errorMessage}");
        }
    }

    private async Task FetchCategories()
    {
        var response = await Http.GetAsync("https://numnumfoods-api.azurewebsites.net/api/productcategory/getAll");
        if (response.IsSuccessStatusCode)
        {
            Categories = await response.Content.ReadFromJsonAsync<List<ProductCategory>>();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to fetch categories: {errorMessage}");
        }
    }

    private void CreateNewProduct()
    {
        Navigation.NavigateTo("/create-product");
    }

    private void CreateNewCategory()
    {
        Navigation.NavigateTo("/create-category");
    }

    private async Task DeleteProduct(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the product with ID {id}?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"https://numnumfoods-api.azurewebsites.net/api/product/{id}");
            if (response.IsSuccessStatusCode)
            {
                await FetchProducts();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to delete product: {errorMessage}");
            }
        }
    }

    private async Task DeleteCategory(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the category with ID {id}?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"https://numnumfoods-api.azurewebsites.net/api/productcategory/{id}");
            if (response.IsSuccessStatusCode)
            {
                await FetchCategories();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to delete category: {errorMessage}");
            }
        }
    }

    private void EditProduct(int id)
    {
        Navigation.NavigateTo($"/edit-product/{id}");
    }
}
