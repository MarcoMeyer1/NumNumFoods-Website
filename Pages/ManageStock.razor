@page "/manage-stock"
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="stock-management">
  
    <h1>Current Stock</h1>

   
    <div class="stock-toolbar">
        <input type="text" placeholder="Search..." class="search-input" @bind="searchTerm" @oninput="FilterStockList" />
        <select @onchange="OnLocationChanged" class="location-dropdown">
            <option value="">Select Location</option>
            @foreach (var location in uniqueLocations)
            {
                <option value="@location">@location</option>
            }
        </select>
        <button class="add-stock-button" @onclick="NavigateToAddStock">+ New Stock</button>
    </div>

    <!-- Table Background -->
    <div class="stock-table-background">
        <div class="stock-table-container">
            <table class="stock-table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Location</th>
                        <th>Items</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredStockList != null)
                    {
                        @foreach (var stock in filteredStockList)
                        {
                            <tr>
                                <td>@stock.Product</td>
                                <td>@stock.Location</td>
                                <td>@stock.Quantity Units</td>
                                <td class="status-column">
                                    <span class="@GetStatusClass(stock.Status)">
                                        @stock.Status
                                    </span>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <button class="update-stock-button" @onclick="NavigateToUpdateStock">Update Stock Count</button>
</div>

@code {
    private string searchTerm { get; set; } = string.Empty;
    private string selectedLocation { get; set; } = string.Empty;

    private List<StockItem> stockList = new();
    private List<StockItem> filteredStockList = new();
    private List<string> uniqueLocations = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadStockItems();
    }

    private async Task LoadStockItems()
    {
        try
        {
            stockList = await Http.GetFromJsonAsync<List<StockItem>>("https://numnumfoods-api.azurewebsites.net/api/stock/getAll");
            uniqueLocations = stockList.Select(s => s.Location).Distinct().ToList();
            FilterStockList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading stock items: {ex.Message}");
        }
    }

    private void FilterStockList()
    {
        filteredStockList = stockList.Where(s =>
            (string.IsNullOrEmpty(searchTerm) || s.Product.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedLocation) || s.Location == selectedLocation)
        ).ToList();
    }

    private void OnLocationChanged(ChangeEventArgs e)
    {
        selectedLocation = e.Value.ToString();
        FilterStockList();
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "In Stock" => "status-instock",
            "Low on Stock" => "status-lowstock",
            _ => "status-receiving"
        };
    }

    private void NavigateToAddStock()
    {
        Navigation.NavigateTo("/add-stock");
    }

    private void NavigateToUpdateStock()
    {
        Navigation.NavigateTo("/update-stock");
    }

    
    public class StockItem
    {
        public int Id { get; set; }
        public string Product { get; set; }
        public string Location { get; set; }
        public int Quantity { get; set; }
        public string Status { get; set; }
    }
}
