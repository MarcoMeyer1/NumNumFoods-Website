@page "/profile/orderhistory"
@inject NavigationManager Navigation
@inject HttpClient Http
@using NumNumFoods.Services
@inject UserState UserState

<div class="order-history-page">
    <h1 class="order-history-title">Orders</h1>

    @if (orders == null)
    {
        <p>Loading orders...</p>
    }
    else if (!orders.Any())
    {
        <p>You have no orders.</p>
    }
    else
    {
        @foreach (var order in orders)
        {
            <div class="order-block">
                <div class="order-details">
                    <p class="order-date">Ordered on @order.OrderDate.ToString("ddd, dd MMM yyyy")</p>
                    <div class="order-images">
                        @foreach (var item in order.OrderItems)
                        {
                            <img src="@item.ImageUrl" alt="@item.ProductName" class="order-image" />
                        }
                    </div>
                </div>
                <button class="order-details-button" @onclick="() => NavigateToOrderDetails(order.OrderId)">Order Details</button>
            </div>
        }
    }
</div>

@code {
    private List<Order> orders;

    protected override async Task OnInitializedAsync()
    {
        int userId = UserState.UserId;

        if (userId == 0)
        {
            // User is not logged in; redirect to login page
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadOrders(userId);
    }

    private async Task LoadOrders(int userId)
    {
        try
        {
            var response = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/order/user/{userId}");
            if (response.IsSuccessStatusCode)
            {
                orders = await response.Content.ReadFromJsonAsync<List<Order>>();

                // Sort orders by most recent date
                orders = orders.OrderByDescending(o => o.OrderDate).ToList();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to load orders: {error}");
                orders = new List<Order>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in LoadOrders: {ex.Message}");
            orders = new List<Order>();
        }
    }

    // Method to navigate to the order details page
    private void NavigateToOrderDetails(int orderId)
    {
        Navigation.NavigateTo($"/profile/orderdetails/{orderId}");
    }

    public class Order
    {
        public int OrderId { get; set; }
        public int CustomerId { get; set; }
        public int BranchId { get; set; }
        public decimal TotalPrice { get; set; }
        public string Status { get; set; } 
        public DateTime OrderDate { get; set; }
        public List<OrderItem> OrderItems { get; set; } = new List<OrderItem>();
    }

    public class OrderItem
    {
        public int OrderItemId { get; set; }
        public int OrderId { get; set; } 
        public int ProductId { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; } 
        public string ProductName { get; set; }
        public string ImageUrl { get; set; }
    }
}
