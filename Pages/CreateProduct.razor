@page "/create-product"
@inject HttpClient Http
@inject NavigationManager Navigation
@using NumNumFoods.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers

<div class="create-product">
    <h1>Create New Product</h1>

    <input type="text" placeholder="Name" @bind="Name" />
    <input type="text" placeholder="Description" @bind="Description" />
    <input type="number" placeholder="Price" @bind="Price" />
    <input type="number" placeholder="Stock Quantity" @bind="StockQuantity" />

    <select @bind="SelectedCategoryId">
        <option value="">Select Category</option>
        @foreach (var category in Categories)
        {
            <option value="@category.CategoryId">@category.Name</option>
        }
    </select>

    <InputFile OnChange="OnFileChange" />
    <button @onclick="SubmitNewProduct">Submit New Product</button>
</div>

@code {
    private string Name { get; set; }
    private string Description { get; set; }
    private decimal Price { get; set; }
    private int StockQuantity { get; set; }
    private int? SelectedCategoryId { get; set; }
    private IBrowserFile selectedFile;
    private List<ProductCategory> Categories { get; set; } = new List<ProductCategory>();

    protected override async Task OnInitializedAsync()
    {
        await FetchCategories();
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        Console.WriteLine($"File selected: {selectedFile.Name}");
    }

    private async Task FetchCategories()
    {
        var response = await Http.GetAsync("https://numnumfoods-api.azurewebsites.net/api/productcategory/getAll");
        if (response.IsSuccessStatusCode)
        {
            Categories = await response.Content.ReadFromJsonAsync<List<ProductCategory>>();
            Console.WriteLine("Fetched categories successfully.");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to fetch categories: {errorMessage}");
        }
    }

    private async Task SubmitNewProduct()
    {
        try
        {
            var newProduct = new ProductCreateRequest
                {
                    Name = Name,
                    Description = Description,
                    Price = Price,
                    StockQuantity = StockQuantity,
                    CategoryId = SelectedCategoryId
                };

            // Upload the image and get the URL
            if (selectedFile != null)
            {
                newProduct.ImageUrl = await UploadFile(selectedFile);
                if (newProduct.ImageUrl == null)
                {
                    Console.WriteLine("Image upload failed.");
                    return; // Stop if the image upload fails
                }
            }

            // Create the product with the image URL
            var response = await Http.PostAsJsonAsync("https://numnumfoods-api.azurewebsites.net/api/product/create", newProduct);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/manage-products");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error creating product: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in SubmitNewProduct: {ex.Message}");
        }
    }

    private async Task<string> UploadFile(IBrowserFile file)
    {
        try
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)); // 10 MB max size
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(fileContent, "file", file.Name);

            Console.WriteLine($"Uploading file: {file.Name}");

            var response = await Http.PostAsync("https://numnumfoods-api.azurewebsites.net/api/product/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var imageUrl = await response.Content.ReadAsStringAsync();
                // Trim quotes if necessary
                imageUrl = imageUrl.Trim('"');
                Console.WriteLine($"File uploaded successfully. Image URL: {imageUrl}");
                return imageUrl; // Return the image URL
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error during file upload: {errorMessage}");
                return null; // Handle the failure gracefully
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during file upload: {ex.Message}");
            return null; // Handle the failure gracefully
        }
    }
}
