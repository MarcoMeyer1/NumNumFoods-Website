@page "/product-details/{ProductId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using NumNumFoods.Models
@using NumNumFoods.Services
@inject UserState UserState

<PageTitle>@product?.Name ?? "Product Details"</PageTitle>

<div class="product-details-container">
    @if (product == null || productDetails == null)
    {
        <p>Loading product details...</p>
    }
    else
    {
        <!-- Product Details Section -->
        <div class="product-details">
            <div class="product-image-container">
                <img src="@product.ImageUrl" alt="@product.Name" class="product-image" />
            </div>
            <div class="product-info">
                <h1 class="product-title">@product.Name</h1>
                <p class="product-description">@product.Description</p>
                <p class="product-price">Price: <strong>R @product.Price.ToString("N2")</strong></p>
                <div class="product-rating">
                    <span>Rating:</span>
                    @for (int i = 1; i <= 5; i++)
                    {
                        <span class="rating-star @(product.Rating >= i ? "filled" : "")">⭐</span>
                    }
                </div>
                <button class="add-to-cart-btn" @onclick="AddToCart">Add to cart</button>
            </div>
        </div>

        <!-- Product Additional Info -->
        <div class="product-additional-info">
            <h2>Additional Information</h2>
            <p>@productDetails.AdditionalInfo</p>
            <h3>Specifications</h3>
            <p>@productDetails.Specifications</p>
        </div>

        <!-- Reviews Section -->
        <div class="reviews-section">
            <h2>Leave a Review</h2>
            <textarea placeholder="Write your review here..." @bind="reviewText" class="review-textarea"></textarea>
            <div class="rating-input">
                <span>Your Rating:</span>
                @for (int i = 1; i <= 5; i++)
                {
                    <span class="rating-star @(userRating >= i ? "selected" : "")"
                          @onclick="() => SetRating(i)">⭐</span>
                }
            </div>
            <button class="submit-review-btn" @onclick="SubmitReview">Submit Review</button>

            <h2>Reviews</h2>
            @if (reviews == null || !reviews.Any())
            {
                <p class="no-reviews">No reviews yet. Be the first to review!</p>
            }
            else
            {
                <ul class="reviews-list">
                    @foreach (var review in reviews)
                    {
                        <li class="review-item">
                            <div>
                                <strong>User @review.UserId</strong>
                                <br />
                                <span class="review-rating">@string.Concat(Enumerable.Repeat("⭐", review.Rating))</span>
                                <br />
                                <span class="review-date">Reviewed on @review.Date.ToString("yyyy-MM-dd")</span>
                            </div>
                            <p class="review-text">@review.Text</p>
                        </li>
                    }
                </ul>
            }
        </div>
    }
</div>

<style>
    .product-details-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    .product-details {
        display: flex;
        align-items: flex-start;
        gap: 20px;
        border-bottom: 2px solid #ddd;
        padding-bottom: 20px;
        margin-bottom: 20px;
    }

    .product-image-container {
        flex: 1;
        text-align: center;
    }

    .product-image {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
    }

    .product-info {
        flex: 2;
    }

    .product-title {
        font-size: 24px;
        margin-bottom: 10px;
    }

    .product-description {
        font-size: 16px;
        margin-bottom: 10px;
    }

    .product-price {
        font-size: 18px;
        color: #333;
        margin-bottom: 10px;
    }

    .product-rating {
        font-size: 18px;
        margin-bottom: 10px;
    }

    .rating-star.filled {
        color: gold;
    }

    .add-to-cart-btn {
        background-color: #ff007b;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
    }

        .add-to-cart-btn:hover {
            background-color: #e60070;
        }

    .product-additional-info {
        margin-top: 20px;
    }

    .reviews-section {
        margin-top: 20px;
    }

    .review-textarea {
        width: 100%;
        height: 100px;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ddd;
    }

    .rating-input {
        margin-bottom: 10px;
    }

    .rating-star.selected {
        color: gold;
        cursor: pointer;
    }

    .submit-review-btn {
        background-color: #ff007b;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        margin-bottom: 20px;
    }

        .submit-review-btn:hover {
            background-color: #e60070;
        }

    .reviews-list {
        list-style: none;
        padding: 0;
    }

    .review-item {
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    .review-rating {
        color: gold;
    }

    .review-date {
        font-size: 12px;
        color: #777;
    }

    .review-text {
        margin-top: 5px;
        font-size: 14px;
        color: #333;
    }

    .no-reviews {
        font-size: 14px;
        color: #777;
    }
</style>

@code {
    [Parameter] public int ProductId { get; set; }

    private Product product;
    private ProductDetail productDetails;
    private List<ProductReview> reviews = new();
    private string reviewText = "";
    private int userRating = 0;

    protected override async Task OnInitializedAsync()
    {
        await FetchProductDetails();
        await FetchProductAdditionalDetails();
        await FetchReviews();
    }

    private async Task FetchProductDetails()
    {
        try
        {
            var response = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/Product/{ProductId}");
            if (response.IsSuccessStatusCode)
            {
                product = await response.Content.ReadFromJsonAsync<Product>();
            }
            else
            {
                Console.WriteLine($"Failed to fetch product details: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching product details: {ex.Message}");
        }
    }

    private async Task FetchProductAdditionalDetails()
    {
        try
        {
            var response = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/ProductDetail/{ProductId}");
            if (response.IsSuccessStatusCode)
            {
                productDetails = await response.Content.ReadFromJsonAsync<ProductDetail>();
            }
            else
            {
                Console.WriteLine($"Failed to fetch product additional details: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching product additional details: {ex.Message}");
        }
    }

    private async Task FetchReviews()
    {
        try
        {
            var response = await Http.GetAsync($"https://numnumfoods-api.azurewebsites.net/api/ProductReview/{ProductId}");
            if (response.IsSuccessStatusCode)
            {
                reviews = await response.Content.ReadFromJsonAsync<List<ProductReview>>();
            }
            else
            {
                Console.WriteLine($"Failed to fetch product reviews: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching reviews: {ex.Message}");
        }
    }

    private async Task AddToCart()
    {
        if (UserState.UserId == 0)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var cartItem = new CartItem
            {
                UserId = UserState.UserId,
                ProductId = ProductId,
                Quantity = 1,
                Price = product.Price
            };

        try
        {
            var response = await Http.PostAsJsonAsync("https://numnumfoods-api.azurewebsites.net/api/cart/add", cartItem);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Product added to cart.");
            }
            else
            {
                Console.WriteLine($"Failed to add to cart: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding product to cart: {ex.Message}");
        }
    }

    private async Task SubmitReview()
    {
        if (string.IsNullOrWhiteSpace(reviewText) || userRating == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please provide both a review and a rating.");
            return;
        }

        var review = new ProductReview
            {
                ProductId = ProductId,
                UserId = UserState.UserId,
                Rating = userRating,
                Text = reviewText,
                Date = DateTime.UtcNow
            };

        try
        {
            var response = await Http.PostAsJsonAsync("https://numnumfoods-api.azurewebsites.net/api/ProductReview", review);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Thank you for your review!");
                reviewText = "";
                userRating = 0;
                await FetchReviews(); // Refresh the reviews
            }
            else
            {
                Console.WriteLine($"Failed to submit review: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting review: {ex.Message}");
        }
    }

    private void SetRating(int rating)
    {
        userRating = rating;
    }

    public class Product
    {
        public int ProductId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string ImageUrl { get; set; }
        public decimal Price { get; set; }
        public int Rating { get; set; }
    }

    public class ProductDetail
    {
        public int ProductDetailId { get; set; }
        public int ProductId { get; set; }
        public string AdditionalInfo { get; set; }
        public string Specifications { get; set; }
    }

    public class ProductReview
    {
        public int ProductId { get; set; }
        public int UserId { get; set; }
        public int Rating { get; set; }
        public string Text { get; set; }
        public DateTime Date { get; set; }
    }

    public class CartItem
    {
        public int UserId { get; set; }
        public int ProductId { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
}
